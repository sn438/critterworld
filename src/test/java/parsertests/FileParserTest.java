package parsertests;

import static org.junit.Assert.*;
import java.io.*;
import org.junit.Test;

import ast.Program;
import parse.Parser;
import parse.ParserFactory;
import simulation.Critter;
import simulation.FileParser;

public class FileParserTest
{

	@Test
	public void testParseAttributes1()
	{
		try
		{
			String[] test = FileParser.parseAttributes(new BufferedReader(new FileReader("examples/example-critter.txt")));
			//for(int i = 0; i < test.length; i++)
				//System.out.println("Element " + i + ": "+ test[i]);
			
			assertEquals(test.length, 7);
			assertTrue(test[0].equals("example"));
			assertTrue(test[1].equals("9"));
			assertTrue(test[2].equals("2"));
			assertTrue(test[3].equals("3"));
			assertTrue(test[4].equals("1"));
			assertTrue(test[5].equals("500"));
			assertTrue(test[6].equals("17"));
		}
		catch (FileNotFoundException e)
		{
			fail();
		}
	}
	
	@Test
	public void testParseAttributes2()
	{
		try
		{
			String[] test = FileParser.parseAttributes(new BufferedReader(new FileReader("examples/failure-example-critter1.txt")));
			//for(int i = 0; i < test.length; i++)
				//System.out.println("Element " + i + ": "+ test[i]);
			
			assertEquals(test.length, 7);
			assertTrue(test[0].equals(""));
			assertTrue(test[1].equals(""));
			assertTrue(test[2].equals(""));
			assertTrue(test[3].equals(""));
			assertTrue(test[4].equals(""));
			assertTrue(test[5].equals(""));
			assertTrue(test[6].equals(""));
		}
		catch (FileNotFoundException e)
		{
			fail();
		}
	}
	
	@Test
	public void testConsoleLoad() //TODO remove when done testing
	{
		try
		{
			BufferedReader br = new BufferedReader(new FileReader("examples/example-critter.txt"));
			String[] parsed = FileParser.parseAttributes(br);
			String name = parsed[0].equals("") ? "Untitled" : parsed[0];
			int[] critAttr = makeCritterAttributes(parsed);
			
			Parser p = ParserFactory.getParser();
			Program prog = p.parse(br);
			
			System.out.println((new Critter(prog, critAttr, name)).toString());
			//world.loadCritters(name, critAttr, prog, n);
		}
		catch (FileNotFoundException e)
		{
			System.err.println("Critter file not found.");
			return;
		}
	}
	
	/**
	 * Prepares an int array to be used as critter memory, based on a string array.<br>
	 * Precondition: the parameter {@code strs} MUST have been generated by the method {@code FileParser.parseAttributes(filename)}.
	 * @param strs an array of strings created by the method {@code FileParser.parseAttributes(filename)}
	 * @return an int array, ready to be used as critter memory
	 */
	private int[] makeCritterAttributes(String[] strs)
	{
		int[] critterAttributes;
		
		int memsize = parseIntFromString(strs[1]);
		if(memsize < 8)
			memsize = 8;
		critterAttributes = new int[memsize];
		critterAttributes[0] = memsize;
		
		int defense = parseIntFromString(strs[2]);
		if(defense < 0)
			defense = 3;
		critterAttributes[1] = defense;
		
		int offense = parseIntFromString(strs[3]);
		if(offense < 0)
		offense = 3;
		critterAttributes[2] = offense;
		
		int size = parseIntFromString(strs[4]);
		if(size < 0)
			size = 1;
		critterAttributes[3] = size;
		
		int energy = parseIntFromString(strs[5]);
		if(energy < 0)
			energy = 500;
		critterAttributes[4] = energy;
		
		int pass = 0;
		critterAttributes[5] = pass;
		
		int tag = 0;
		critterAttributes[6] = tag;
		
		int posture = parseIntFromString(strs[6]);
		if(posture < 0 || posture > 99)
			posture = 0;
		critterAttributes[7] = posture;
		
		return critterAttributes;
	}
	
	/**
	 * Parses an integer value from a given string, or returns -1 if no integer was found.
	 * @param s the string to parse
	 * @return the int parsed from the string, or -1 if no integer was found
	 */
	private int parseIntFromString(String s)
	{
		try
		{
			return Integer.parseInt(s);
		}
		catch (NumberFormatException n)
		{
			return -1;
		}
	}
}